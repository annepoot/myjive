image: continuumio/miniconda3:latest

stages:
  - test
  - build
  - validation
  - release

test_code:
  stage: test
  script:
    - echo "Installing environment"
    - conda env create -f ENVIRONMENT.yml
    - source $(conda info --base)/etc/profile.d/conda.sh
    - conda activate myjive
    - echo "Running tests"
    - pytest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test_release_name:
  stage: test
  script:
    - |
      # Check if MR title follows versioning pattern
      if [[ "$CI_MERGE_REQUEST_TITLE" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "✓ Merge request title follows the versioning pattern v#.#.#"
        
        # Extract version from MR title (remove the 'v' prefix)
        MR_VERSION="${CI_MERGE_REQUEST_TITLE:1}"
        echo "MR version: $MR_VERSION"
        
        # Extract version from pyproject.toml
        # Using grep + sed to extract version
        PROJECT_VERSION=$(grep -E "^version\s*=\s*[\"'].*[\"']" pyproject.toml | sed -E 's/version\s*=\s*[\"'"'"'](.*)[\"'"'"']/\1/')
        echo "Project version: $PROJECT_VERSION"

        # Compare versions
        if [ "$MR_VERSION" = "$PROJECT_VERSION" ]; then
          echo "✓ Versions match between MR title and pyproject.toml"
          
          # Extract download URL from pyproject.toml
          DOWNLOAD_URL=$(grep -E "download\s*=\s*[\"'].*[\"']" pyproject.toml | sed -E 's/.*download\s*=\s*[\"'"'"'](.*)[\"'"'"'].*/\1/')
          echo "Current download URL: $DOWNLOAD_URL"
          
          # Expected download URL format
          EXPECTED_URL="https://gitlab.tudelft.nl/apoot1/myjive/-/archive/v$PROJECT_VERSION/myjive-v$PROJECT_VERSION.tar.gz"
          echo "Expected download URL: $EXPECTED_URL"
          
          # Check if download URL matches expected format
          if [ "$DOWNLOAD_URL" = "$EXPECTED_URL" ]; then
            echo "✓ Download URL is correctly formatted"
            exit 0
          else
            echo "Error: Download URL does not match expected format"
            echo "Please update the download URL in pyproject.toml to:"
            echo "$EXPECTED_URL"
            exit 1
          fi
        else
          echo "Error: Version mismatch between MR title ($MR_VERSION) and pyproject.toml ($PROJECT_VERSION)"
          exit 1
        fi
      else
        echo "Error: Merge request title does not follow the required pattern v#.#.#"
        echo "Current title: $CI_MERGE_REQUEST_TITLE"
        exit 1
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"
  
build_wheel:
  stage: build
  script:
    - echo "Installing dev environment"
    - conda env create -f dev/ENVIRONMENT-dev.yml
    - source $(conda info --base)/etc/profile.d/conda.sh
    - conda activate myjive-dev
    - echo "Building wheel file"
    - python -m build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"
  artifacts:
    paths:
      - dist/*.whl  # Save the wheel file as an artifact
    expire_in: 1 week

validate_wheel:
  stage: validation
  image: python:3.10
  script:
    - echo "Installing cholmod library"
    - apt-get update && apt-get install -y libsuitesparse-dev
    - WHEEL_FILE=$(ls dist/*.whl | head -n 1)
    - echo "Testing installation of wheel file"
    - echo $WHEEL_FILE
    - pip install $WHEEL_FILE
    - echo "Testing myjive imports"
    - python -c "import myjive; print('Successfully imported myjive')"
    - python -c "import myjivex; print('Successfully imported myjivex')"
  needs:
    - build_wheel
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"

release_tag:
  stage: release
  script:
    - |
      # Extract version from pyproject.toml
      VERSION=$(grep -E "^version\s*=\s*[\"'].*[\"']" pyproject.toml | sed -E 's/version\s*=\s*[\"'"'"'](.*)[\"'"'"']/\1/')
      echo "Project version: $VERSION"
      
      # Set Git user identity for the pipeline
      git config --global user.name "Gitlab Runner"
      git config --global user.email "a.poot-1@tudelft.nl"
      
      # Check if the tag already exists
      if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
        echo "Tag v$VERSION already exists, skipping tag creation"
        exit 0
      else
        echo "Creating tag v$VERSION"
        git tag "v$VERSION"
        git push "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "v$VERSION"
        echo "✓ Tag v$VERSION created and pushed successfully"
      fi
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $CI_DEFAULT_BRANCH_NAME && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release"